from flask import Flask, request, render_template_string, send_file, redirect, url_for
from io import BytesIO
import hashlib

app = Flask(__name__)

# ▣ 가상 YB 파일 저장소 (완전 수식 기반)
class VirtualYBFile:
    def __init__(self, name, seed_hash, size):
        self.name = name
        self.seed_hash = seed_hash
        self.size = size

    def formula(self, i):
        h = hashlib.sha256(f"{self.seed_hash}:{i}".encode()).digest()
        return h[0]  # 첫 바이트로 수식 생성

    def read_range(self, start, end):
        return bytes([self.formula(i) for i in range(start, min(end, self.size))])

class YBFileStorage:
    def __init__(self):
        self.files = {}

    def create_file(self, name, seed_hash, size):
        self.files[name] = VirtualYBFile(name, seed_hash, size)

    def upload_file(self, file_storage):
        data = file_storage.read()
        size = len(data)
        seed_hash = hashlib.sha256(data).hexdigest()
        self.create_file(
            name=file_storage.filename,
            seed_hash=seed_hash,
            size=size
        )

    def download_file(self, name):
        file = self.files.get(name)
        if not file:
            return None
        data = file.read_range(0, file.size)
        return BytesIO(data)

    def delete_file(self, name):
        if name in self.files:
            del self.files[name]

    def list_files(self):
        return list(self.files.keys())

fs = YBFileStorage()

# ▣ HTML 템플릿
HTML_PAGE = '''
<!doctype html>
<title>YB 클라우드</title>
<h1>📂 Yottabyte 가상 클라우드</h1>
<form method=post enctype=multipart/form-data>
  <input type=file name=file>
  <input type=submit value=Upload>
</form>
<h2>🗃️ 업로드된 파일</h2>
<ul>
  {% for file in files %}
    <li>{{ file }} - <a href="/download/{{ file }}">Download</a> |
    <a href="/delete/{{ file }}">Delete</a></li>
  {% endfor %}
</ul>
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        file = request.files['file']
        if file:
            fs.upload_file(file)
    return render_template_string(HTML_PAGE, files=fs.list_files())

@app.route('/download/<filename>')
def download(filename):
    file_io = fs.download_file(filename)
    if not file_io:
        return "File not found", 404
    return send_file(file_io, download_name=filename, as_attachment=True)

@app.route('/delete/<filename>')
def delete(filename):
    fs.delete_file(filename)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True, port=5000)
