import numpy as np
from itertools import permutations
import time

# ▒▒▒ APU 기반 TSP 최적화 시뮬레이터 ▒▒▒

def apu_tsp_solver(num_cities=8, seed=42):
    np.random.seed(seed)
    cities = [chr(65 + i) for i in range(num_cities)]  # ['A', 'B', ..., 'H']
    dist_matrix = np.random.randint(10, 100, size=(num_cities, num_cities))
    np.fill_diagonal(dist_matrix, 0)

    start = time.time()
    min_cost = float('inf')
    best_route = None
    for perm in permutations(range(num_cities)):
        cost = sum(dist_matrix[perm[i]][perm[(i + 1) % num_cities]] for i in range(num_cities))
        if cost < min_cost:
            min_cost = cost
            best_route = perm
    end = time.time()

    best_route_named = [cities[i] for i in best_route] + [cities[best_route[0]]]
    return {
        "도시 수": num_cities,
        "최적 경로": best_route_named,
        "최소 거리": min_cost,
        "계산 시간": round(end - start, 4),
        "거리 행렬": dist_matrix
    }

# 실행
apu_tsp_solver_result = apu_tsp_solver(num_cities=8)
apu_tsp_solver_result
