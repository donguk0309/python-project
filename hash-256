import mpmath
import hashlib
import operator
import sys
sys.set_int_max_str_digits(0) 

mpmath.mp.dps = 100  # 소수점 100자리까지 정밀도 설정

def normalization_constant_big(n):
    numerator = mpmath.mpf(n) * (mpmath.mpf(n) + 1) * (2 * mpmath.mpf(n) + 1) / 6
    return mpmath.sqrt(numerator)

def quantum_amplitude_big(i, norm):
    return mpmath.mpf(i) / norm

def hash_for_index(i):
    i_bytes = str(i).encode()
    return hashlib.sha256(i_bytes).hexdigest()

def safe_eval(expr):
    """
    사칙연산과 지수연산만 허용하는 안전한 평가 함수
    """
    allowed_names = {
        '__builtins__': None,
        'pow': pow,
    }
    # 허용할 연산자와 함수는 기본적으로 eval에 없지만, pow는 필요하면 추가
    # eval 실행 (사칙연산, ** 등 기본 연산만 가능)
    return eval(expr, allowed_names, {})

def main():
    N = 10**1000000
    print("최대 인덱스 N =", N)

    print("정규화 상수 계산 중... (조금 시간이 걸릴 수 있음)")
    norm = normalization_constant_big(N)
    print("정규화 상수 계산 완료.")

    while True:
        try:
            inp = input("진폭과 해시를 계산할 인덱스 i 입력 (1~N, 종료는 'q'): ").strip()
            if inp.lower() == 'q':
                print("종료합니다.")
                break

            # 안전하게 평가해서 정수 계산
            i = safe_eval(inp)

            # 평가 결과가 정수인지 체크
            if not isinstance(i, int):
                # float가 나왔으면 정수로 변환 시도
                if isinstance(i, float) and i.is_integer():
                    i = int(i)
                else:
                    print("정수 형태의 표현식을 입력하세요.")
                    continue

            if not (1 <= i <= N):
                print(f"1 이상 {N} 이하의 정수를 입력하세요.")
                continue

            amplitude = quantum_amplitude_big(i, norm)
            h = hash_for_index(i)

            print(f"인덱스 {i}의 정규화된 진폭: {amplitude}")
            print(f"인덱스 {i}의 SHA256 해시값: {h}")
            print("-" * 40)

        except Exception as e:
            print("입력 오류:", e)

if __name__ == "__main__":
    main()
