import time

# APU 연산 가속 - 진폭 기반 제곱합
def apu_sum_squares(n):
    return n * (n + 1) * (2 * n + 1) // 6  # 수학 공식 이용

start = time.time()
n = 1_000_000_000_000  # 1조
result = apu_sum_squares(n)
end = time.time()

print("✅ APU 연산 가속 결과 (1부터 1조까지 제곱합):")
print(result)
print("⏱ 계산 시간:", end - start, "초")


import time

def apu_cubic_sum(n):
    # 정수론 공식: (n(n+1)/2)^2
    return ((n * (n + 1)) // 2) ** 2

# 1부터 1조까지
n = 1_000_000_000_000

start = time.time()
cubic_sum = apu_cubic_sum(n)
end = time.time()

print(f"✅ APU 기반 정수론 (3제곱 합): 1부터 {n:,}까지의 i^3의 합")
print(f" - 결과: {cubic_sum}")
print(f"⏱ 계산 시간: {end - start:.8f}초")



import numpy as np

def apu_basel_convergence(epsilon=1e-10):
    sum_amp = 0.0
    n = 1
    while True:
        amp = 1 / (n ** 2)
        sum_amp += amp
        if amp < epsilon:
            break
        n += 1
    return sum_amp, n

val, terms = apu_basel_convergence()
print(f"APU 기반 수렴값: {val:.12f} (총 {terms} 항)")


def apu_modular_exponentiation(a, p):
    # APU 기반: 진폭으로 a^(p-1) % p
    result = 1
    for _ in range(p - 1):
        result = (result * a) % p
    return result

# 테스트
a, p = 3, 7
print(f"{a}^{p-1} ≡ {apu_modular_exponentiation(a, p)} mod {p}")



import hashlib
import time

# APU 가상 구조를 위한 진폭 기반 저장소 (단순 딕셔너리 시뮬레이션)
apu_hash_table = {}

# 진폭 기반 해시 생성
def apu_generate_hashes(max_value=2**20):  # 데모용 범위
    print("🔄 APU 병렬 해시 생성 중...")
    start = time.time()
    for i in range(max_value):
        data = str(i).encode()
        hash_val = hashlib.sha256(data).hexdigest()
        apu_hash_table[hash_val] = i  # 진폭 메모리에 저장
    end = time.time()
    print(f"✅ 해시 생성 완료 (소요 시간: {end - start:.2f}초)")
    print(f"📦 총 저장된 해시 수: {len(apu_hash_table)}")

# 주어진 해시값에 대해 복호화 (탐색)
def apu_reverse_hash(target_hash):
    print(f"🔍 해시 복호화 시도: {target_hash}")
    return apu_hash_table.get(target_hash, None)

# 테스트 실행
if __name__ == "__main__":
    # 1. APU 방식으로 해시 테이블 생성
    apu_generate_hashes()

    # 2. 임의 수 -> 해시 -> 복호화 테스트
    test_number = 123456
    hash_value = hashlib.sha256(str(test_number).encode()).hexdigest()
    print(f"\n🔒 원본 수: {test_number}")
    print(f"🔐 해시값: {hash_value}")

    # 3. APU 복호화 시도
    result = apu_reverse_hash(hash_value)
    if result is not None:
        print(f"✅ 복호화 성공! 원본 수: {result}")
    else:
        print("❌ 복호화 실패: 해시값이 테이블에 없음")





import hashlib
import time
import os

# 설정
CHUNK_SIZE = 1000000  # 100만 개씩 저장
OUTPUT_DIR = "apu_hash_chunks"

# 진폭 기반 해시 생성 (x ~ y 범위)
def apu_generate_hashes(x, y):
    print(f"🔄 APU 해시 생성 중... 범위: {x} ~ {y - 1}")
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    chunk = []
    file_index = 0
    start_time = time.time()

    for i in range(x, y):
        data = str(i).encode()
        hash_val = hashlib.sha256(data).hexdigest()
        chunk.append(f"{hash_val},{i}\n")

        if len(chunk) >= CHUNK_SIZE:
            filename = f"{OUTPUT_DIR}/hash_part_{file_index}.txt"
            with open(filename, "w") as f:
                f.writelines(chunk)
            print(f"📁 저장: {filename} ({len(chunk)}개)")
            chunk = []
            file_index += 1

    # 남은 데이터 저장
    if chunk:
        filename = f"{OUTPUT_DIR}/hash_part_{file_index}.txt"
        with open(filename, "w") as f:
            f.writelines(chunk)
        print(f"📁 저장: {filename} ({len(chunk)}개)")

    end_time = time.time()
    print(f"✅ 해시 저장 완료 (총 파일 수: {file_index + 1}, 소요 시간: {end_time - start_time:.2f}초)")

# 주어진 해시값 복호화 (모든 파일 탐색)
def apu_reverse_hash(target_hash):
    print(f"🔍 해시 복호화 시도: {target_hash}")
    if not os.path.exists(OUTPUT_DIR):
        print("❌ 오류: 저장된 해시 파일이 없습니다.")
        return None

    for filename in os.listdir(OUTPUT_DIR):
        filepath = os.path.join(OUTPUT_DIR, filename)
        with open(filepath, "r") as f:
            for line in f:
                hash_val, number = line.strip().split(",")
                if hash_val == target_hash:
                    return int(number)
    return None

# 테스트 실행
if __name__ == "__main__":
    # 1. 해시 테이블 생성
    x = 100000
    y = 1100000  # 총 100만 개 생성
    apu_generate_hashes(x, y)

    # 2. 테스트 숫자
    test_number = 123456
    hash_value = hashlib.sha256(str(test_number).encode()).hexdigest()
    print(f"\n🔒 원본 수: {test_number}")
    print(f"🔐 해시값: {hash_value}")

    # 3. 복호화 시도
    result = apu_reverse_hash(hash_value)
    if result is not None:
        print(f"✅ 복호화 성공! 원본 수: {result}")
    else:
        print("❌ 복호화 실패: 해시값이 없음")


