import numpy as np
from itertools import product

# 절(clause) 정의: [(변수 인덱스, 부정 여부)]
clauses = [
    [(0, False), (1, False), (2, False)],     # x1 ∨ x2 ∨ x3
    [(0, True),  (1, False), (2, True)],      # ¬x1 ∨ x2 ∨ ¬x3
    [(1, True),  (2, False), (3, False)]      # ¬x2 ∨ x3 ∨ x4
]

num_vars = 4  # 변수 수: x1 ~ x4
assignments = list(product([0, 1], repeat=num_vars))

def satisfies_clause(assignment, clause):
    return any((not assignment[i] if is_not else assignment[i]) for i, is_not in clause)

def satisfies_all(assignment):
    return all(satisfies_clause(assignment, clause) for clause in clauses)

def to_amplitude(assignment):
    # 진폭은 2^n 상태 중 하나로 간주 (1은 상태 존재)
    return 1 / np.sqrt(2 ** num_vars) if satisfies_all(assignment) else 0

# APU 방식으로 상태 진폭 계산
total_amplitude = 0
solutions = []
for a in assignments:
    amp = to_amplitude(a)
    total_amplitude += amp
    if amp > 0:
        solutions.append(a)

print("✅ SAT 결과:", "SATISFIABLE" if total_amplitude > 0 else "UNSATISFIABLE")
print("✔️ 가능한 해:")
for sol in solutions:
    print("  ", sol)
